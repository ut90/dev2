<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - 図書館管理システム</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <%- include('../partials/staff_header') %>

    <div class="container mt-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>利用者管理</h2>
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
                <i class="bi bi-plus-circle"></i> 新規利用者登録
            </button>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">利用者検索</h5>
            </div>
            <div class="card-body">
                <form id="searchForm" class="row g-3">
                    <div class="col-md-4">
                        <label for="searchId" class="form-label">利用者ID</label>
                        <input type="text" class="form-control" id="searchId">
                    </div>
                    <div class="col-md-4">
                        <label for="searchName" class="form-label">氏名</label>
                        <input type="text" class="form-control" id="searchName">
                    </div>
                    <div class="col-md-4">
                        <label for="searchEmail" class="form-label">メールアドレス</label>
                        <input type="email" class="form-control" id="searchEmail">
                    </div>
                    <div class="col-12 text-end">
                        <button type="button" class="btn btn-secondary" id="resetButton">リセット</button>
                        <button type="button" class="btn btn-primary" id="searchButton">検索</button>
                    </div>
                </form>
            </div>
        </div>

        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">利用者一覧</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>利用者ID</th>
                                <th>氏名</th>
                                <th>メールアドレス</th>
                                <th>電話番号</th>
                                <th>会員種別</th>
                                <th>ステータス</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="userTableBody">
                            <tr>
                                <td colspan="7" class="text-center">読み込み中...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <nav aria-label="Page navigation" class="mt-3">
                    <ul class="pagination justify-content-center" id="pagination">
                        <!-- ページネーションはJavaScriptで動的に生成 -->
                    </ul>
                </nav>
            </div>
        </div>
    </div>

    <!-- 新規利用者登録モーダル -->
    <div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addUserModalLabel">新規利用者登録</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addUserForm">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="name" class="form-label">氏名 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="name" name="name" required>
                            </div>
                            <div class="col-md-6">
                                <label for="email" class="form-label">メールアドレス <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="phone" class="form-label">電話番号</label>
                                <input type="tel" class="form-control" id="phone" name="phone">
                            </div>
                            <div class="col-md-6">
                                <label for="address" class="form-label">住所</label>
                                <input type="text" class="form-control" id="address" name="address">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="birthdate" class="form-label">生年月日</label>
                                <input type="date" class="form-control" id="birthdate" name="birthdate">
                            </div>
                            <div class="col-md-6">
                                <label for="memberType" class="form-label">会員種別 <span class="text-danger">*</span></label>
                                <select class="form-select" id="memberType" name="memberType" required>
                                    <option value="一般">一般</option>
                                    <option value="学生">学生</option>
                                    <option value="シニア">シニア</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="password" class="form-label">パスワード <span class="text-danger">*</span></label>
                                <input type="password" class="form-control" id="password" name="password" required>
                            </div>
                            <div class="col-md-6">
                                <label for="confirmPassword" class="form-label">パスワード（確認） <span class="text-danger">*</span></label>
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
                    <button type="button" class="btn btn-primary" id="saveUserButton">登録</button>
                </div>
            </div>
        </div>
    </div>

    <!-- 利用者編集モーダル -->
    <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editUserModalLabel">利用者情報編集</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm">
                        <input type="hidden" id="editUserId" name="userId">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editName" class="form-label">氏名 <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="editName" name="name" required>
                            </div>
                            <div class="col-md-6">
                                <label for="editEmail" class="form-label">メールアドレス <span class="text-danger">*</span></label>
                                <input type="email" class="form-control" id="editEmail" name="email" required>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editPhone" class="form-label">電話番号</label>
                                <input type="tel" class="form-control" id="editPhone" name="phone">
                            </div>
                            <div class="col-md-6">
                                <label for="editAddress" class="form-label">住所</label>
                                <input type="text" class="form-control" id="editAddress" name="address">
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editBirthdate" class="form-label">生年月日</label>
                                <input type="date" class="form-control" id="editBirthdate" name="birthdate">
                            </div>
                            <div class="col-md-6">
                                <label for="editMemberType" class="form-label">会員種別 <span class="text-danger">*</span></label>
                                <select class="form-select" id="editMemberType" name="memberType" required>
                                    <option value="一般">一般</option>
                                    <option value="学生">学生</option>
                                    <option value="シニア">シニア</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label for="editStatus" class="form-label">ステータス <span class="text-danger">*</span></label>
                                <select class="form-select" id="editStatus" name="status" required>
                                    <option value="有効">有効</option>
                                    <option value="無効">無効</option>
                                </select>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">キャンセル</button>
                    <button type="button" class="btn btn-primary" id="updateUserButton">更新</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // ページ読み込み時に実行
        document.addEventListener('DOMContentLoaded', function() {
            // 認証チェック
            const token = localStorage.getItem('token');
            if (!token) {
                window.location.href = '/staff/login';
                return;
            }
            
            // 利用者一覧を取得
            fetchUsers();
            
            // 検索ボタンのイベントリスナー
            document.getElementById('searchButton').addEventListener('click', function() {
                fetchUsers();
            });
            
            // リセットボタンのイベントリスナー
            document.getElementById('resetButton').addEventListener('click', function() {
                document.getElementById('searchId').value = '';
                document.getElementById('searchName').value = '';
                document.getElementById('searchEmail').value = '';
                fetchUsers();
            });
            
            // 新規利用者登録ボタンのイベントリスナー
            document.getElementById('saveUserButton').addEventListener('click', function() {
                saveUser();
            });
            
            // 利用者情報更新ボタンのイベントリスナー
            document.getElementById('updateUserButton').addEventListener('click', function() {
                updateUser();
            });
        });
        
        // 利用者一覧を取得する関数
        async function fetchUsers(page = 1) {
            try {
                const searchId = document.getElementById('searchId').value;
                const searchName = document.getElementById('searchName').value;
                const searchEmail = document.getElementById('searchEmail').value;
                
                let url = `/api/users?page=${page}`;
                if (searchId) url += `&id=${searchId}`;
                if (searchName) url += `&name=${encodeURIComponent(searchName)}`;
                if (searchEmail) url += `&email=${encodeURIComponent(searchEmail)}`;
                
                const response = await fetch(url, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    displayUsers(data.users);
                    displayPagination(data.pagination);
                } else {
                    displayError();
                }
            } catch (error) {
                console.error('利用者一覧の取得エラー:', error);
                displayError();
            }
        }
        
        // 利用者一覧を表示する関数
        function displayUsers(users) {
            const tbody = document.getElementById('userTableBody');
            
            if (users.length === 0) {
                tbody.innerHTML = '<tr><td colspan="7" class="text-center">該当する利用者はいません</td></tr>';
                return;
            }
            
            tbody.innerHTML = '';
            
            users.forEach(user => {
                const row = document.createElement('tr');
                
                row.innerHTML = `
                    <td>${user.user_id}</td>
                    <td>${user.name}</td>
                    <td>${user.email}</td>
                    <td>${user.phone || '-'}</td>
                    <td>${user.user_type}</td>
                    <td>
                        <span class="badge ${user.status === '有効' ? 'bg-success' : 'bg-danger'}">
                            ${user.status}
                        </span>
                    </td>
                    <td>
                        <button type="button" class="btn btn-sm btn-outline-primary me-1" onclick="editUser(${user.user_id})">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteUser(${user.user_id})">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                `;
                
                tbody.appendChild(row);
            });
        }
        
        // ページネーションを表示する関数
        function displayPagination(pagination) {
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';
            
            if (pagination.totalPages <= 1) {
                return;
            }
            
            // 前へボタン
            const prevLi = document.createElement('li');
            prevLi.className = `page-item ${pagination.currentPage === 1 ? 'disabled' : ''}`;
            prevLi.innerHTML = `
                <a class="page-link" href="#" onclick="fetchUsers(${pagination.currentPage - 1}); return false;">
                    前へ
                </a>
            `;
            paginationElement.appendChild(prevLi);
            
            // ページ番号
            for (let i = 1; i <= pagination.totalPages; i++) {
                const li = document.createElement('li');
                li.className = `page-item ${i === pagination.currentPage ? 'active' : ''}`;
                li.innerHTML = `
                    <a class="page-link" href="#" onclick="fetchUsers(${i}); return false;">
                        ${i}
                    </a>
                `;
                paginationElement.appendChild(li);
            }
            
            // 次へボタン
            const nextLi = document.createElement('li');
            nextLi.className = `page-item ${pagination.currentPage === pagination.totalPages ? 'disabled' : ''}`;
            nextLi.innerHTML = `
                <a class="page-link" href="#" onclick="fetchUsers(${pagination.currentPage + 1}); return false;">
                    次へ
                </a>
            `;
            paginationElement.appendChild(nextLi);
        }
        
        // エラーメッセージを表示する関数
        function displayError() {
            const tbody = document.getElementById('userTableBody');
            tbody.innerHTML = '<tr><td colspan="7" class="text-center text-danger">データの取得に失敗しました</td></tr>';
        }
        
        // 新規利用者を登録する関数
        async function saveUser() {
            try {
                const form = document.getElementById('addUserForm');
                
                // バリデーション
                if (!form.checkValidity()) {
                    form.reportValidity();
                    return;
                }
                
                // パスワード確認
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                
                if (password !== confirmPassword) {
                    alert('パスワードが一致しません');
                    return;
                }
                
                const userData = {
                    name: document.getElementById('name').value,
                    email: document.getElementById('email').value,
                    phone: document.getElementById('phone').value,
                    address: document.getElementById('address').value,
                    birthdate: document.getElementById('birthdate').value,
                    memberType: document.getElementById('memberType').value,
                    password: password
                };
                
                const response = await fetch('/api/users', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify(userData)
                });
                
                if (response.ok) {
                    // モーダルを閉じる
                    const modal = bootstrap.Modal.getInstance(document.getElementById('addUserModal'));
                    modal.hide();
                    
                    // フォームをリセット
                    form.reset();
                    
                    // 利用者一覧を再取得
                    fetchUsers();
                    
                    alert('利用者を登録しました');
                } else {
                    const data = await response.json();
                    alert(`エラー: ${data.message}`);
                }
            } catch (error) {
                console.error('利用者登録エラー:', error);
                alert('利用者の登録に失敗しました');
            }
        }
        
        // 利用者情報を編集するためのモーダルを表示する関数
        async function editUser(userId) {
            try {
                const response = await fetch(`/api/users/${userId}`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (response.ok) {
                    const user = await response.json();
                    
                    // フォームに値をセット
                    document.getElementById('editUserId').value = user.user_id;
                    document.getElementById('editName').value = user.name;
                    document.getElementById('editEmail').value = user.email;
                    document.getElementById('editPhone').value = user.phone || '';
                    document.getElementById('editAddress').value = user.address || '';
                    document.getElementById('editBirthdate').value = user.birthdate ? user.birthdate.split('T')[0] : '';
                    document.getElementById('editMemberType').value = user.member_type;
                    document.getElementById('editStatus').value = user.status;
                    
                    // モーダルを表示
                    const modal = new bootstrap.Modal(document.getElementById('editUserModal'));
                    modal.show();
                } else {
                    alert('利用者情報の取得に失敗しました');
                }
            } catch (error) {
                console.error('利用者情報取得エラー:', error);
                alert('利用者情報の取得に失敗しました');
            }
        }
        
        // 利用者情報を更新する関数
        async function updateUser() {
            try {
                const form = document.getElementById('editUserForm');
                
                // バリデーション
                if (!form.checkValidity()) {
                    form.reportValidity();
                    return;
                }
                
                const userId = document.getElementById('editUserId').value;
                
                const userData = {
                    name: document.getElementById('editName').value,
                    email: document.getElementById('editEmail').value,
                    phone: document.getElementById('editPhone').value,
                    address: document.getElementById('editAddress').value,
                    birthdate: document.getElementById('editBirthdate').value,
                    memberType: document.getElementById('editMemberType').value,
                    status: document.getElementById('editStatus').value
                };
                
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    },
                    body: JSON.stringify(userData)
                });
                
                if (response.ok) {
                    // モーダルを閉じる
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editUserModal'));
                    modal.hide();
                    
                    // 利用者一覧を再取得
                    fetchUsers();
                    
                    alert('利用者情報を更新しました');
                } else {
                    const data = await response.json();
                    alert(`エラー: ${data.message}`);
                }
            } catch (error) {
                console.error('利用者情報更新エラー:', error);
                alert('利用者情報の更新に失敗しました');
            }
        }
        
        // 利用者を削除する関数
        async function deleteUser(userId) {
            if (!confirm('この利用者を削除してもよろしいですか？')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/users/${userId}`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('token')}`
                    }
                });
                
                if (response.ok) {
                    // 利用者一覧を再取得
                    fetchUsers();
                    
                    alert('利用者を削除しました');
                } else {
                    const data = await response.json();
                    alert(`エラー: ${data.message}`);
                }
            } catch (error) {
                console.error('利用者削除エラー:', error);
                alert('利用者の削除に失敗しました');
            }
        }
    </script>
</body>
</html>
